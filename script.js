document.addEventListener('DOMContentLoaded', () => {
    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.ready();
    }
    
    // --- –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï ---
    const state = {
        currentStep: 1,
        archetype: 'growing',
        unlockedAchievements: new Set(),
        visitedTabs: new Set(),
        savedPlans: JSON.parse(localStorage.getItem('savedPlans')) || [],
        lastCalculation: null,
        isInitialLoad: true
    };

    // --- –ù–ê–í–ò–ì–ê–¶–ò–Ø –ò –ü–†–û–ì–†–ï–°–°-–ë–ê–† ---
    const updateProgressBar = (step) => {
        state.currentStep = step;
        document.querySelectorAll('.progress-step').forEach(el => {
            const stepNum = parseInt(el.dataset.step, 10);
            el.classList.toggle('completed', stepNum < step);
            el.classList.toggle('active', stepNum === step);
        });
    };

    const showScreen = (screenId, step) => {
        document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
        document.getElementById(screenId).classList.add('active');
        updateProgressBar(step);
    };

    // --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ---
    const showAchievement = (id, icon, title, subtitle) => {
        if (state.unlockedAchievements.has(id)) return;
        state.unlockedAchievements.add(id);
        const container = document.getElementById('achievement-container');
        const achDiv = document.createElement('div');
        achDiv.className = 'achievement-popup';
        achDiv.innerHTML = `<span>${icon}</span> <div class="achievement-text"><strong>${title}</strong><small>${subtitle}</small></div>`;
        container.appendChild(achDiv);
        setTimeout(() => achDiv.remove(), 4000);
    };

    const pulseMessages = ["üöÄ –ö—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª '–ë—ã—Å—Ç—Ä—ã–π –ü–æ—Ç–æ–∫'!", "üìà –ù–æ–≤—ã–π '–†–∞—Å—Ç—É—â–∏–π –ü–æ—Ç–æ–∫' –±—ã–ª –∑–∞–ø—É—â–µ–Ω!", "üèõÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Å–≤–æ–π '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ü–æ—Ç–æ–∫'."];
    setInterval(() => {
        const pulseEl = document.getElementById('pulse-notification');
        pulseEl.innerHTML = pulseMessages[Math.floor(Math.random() * pulseMessages.length)];
        pulseEl.classList.add('show');
        setTimeout(() => pulseEl.classList.remove('show'), 4000);
    }, 12000);

    // --- –§–ò–ù–ê–õ–¨–ù–´–ô –≠–ö–†–ê–ù ---
    const renderFinalSummary = () => {
        const container = document.getElementById('summary-container');
        if (state.lastCalculation) {
            const { name, result, investment } = state.lastCalculation;
            container.innerHTML = `<p>–í—ã —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏, —á—Ç–æ <strong>${name}</strong> –ø—Ä–∏ –≤–∫–ª–∞–¥–µ ${investment} –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤–∞–º <strong>${result}</strong>. <br>–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ,–≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –ø–æ—Ç–æ–∫ –∏ —Å—É–º–º—É.<br><b>–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç!</p>`;
        } else {
            container.innerHTML = `<p>–í—ã —É–≤–∏–¥–µ–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. –¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥, —á—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.</p>`;
        }
    };

    // --- –õ–û–ì–ò–ö–ê –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ---
    const calculatorContent = document.getElementById('calculator-content');
    const tabs = document.querySelectorAll('.tab-button');
    

    const panesHTML = {
         'growing': `...`, 'fast': `...`, 'cumulative': `...`
    };

    panesHTML.growing = `
        <div id="calc-growing" class="calculator-pane">
            <p class="pane-description">–ü—Ä–æ–≥—Ä–∞–º–º–∞, –≥–¥–µ –≤–∞—à–∞ –ø—Ä–∏–±—ã–ª—å —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º. –ß–µ–º –¥–æ–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–µ–Ω—å–≥–∏ ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –æ–Ω–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç.</p>
            <div class="input-area">
                <div class="input-group">
                    <label for="growing-amount">–°—É–º–º–∞ –≤–∫–ª–∞–¥–∞</label>
                    <input type="number" id="growing-amount" value="1000" step="100" min="1000">
                </div>
            </div>
            <div class="result-area">
                <div class="result-header"><span>–†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤</span><h3 id="growing-result-total">1 320.00 ‚ÇΩ</h3></div>
                <div class="progress-bar-viz"><div id="growing-progress-fill" class="progress-bar-fill"></div></div>
                <div class="result-stats">
                    <div class="stat-item"><span>–í–∫–ª–∞–¥</span><strong id="growing-investment">1 000.00 ‚ÇΩ</strong></div>
                    <div class="stat-item"><span>–ü—Ä–∏–±—ã–ª—å</span><strong id="growing-profit">+ 320.00 ‚ÇΩ</strong></div>
                    <div class="stat-item"><span>ROI</span><strong id="growing-roi">+32.00%</strong></div>
                </div>
                <button class="btn btn-main-action" data-action="next">–Ø –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å!</button>
            </div>
        </div>`;
    panesHTML.fast = `
        <div id="calc-fast" class="calculator-pane">
            <p class="pane-description">–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–±—ã–ª—å —É–∂–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞.</p>
            <div class="input-area">
                 <div class="input-group">
                    <label>–°—É–º–º–∞ —Å—Ç–∞—Ä—Ç–∞</label>
                    <div class="radio-options">
                        <label><input type="radio" name="fast-amount" value="3000" checked> <span>3K</span></label>
                        <label><input type="radio" name="fast-amount" value="15000"> <span>15K</span></label>
                        <label><input type="radio" name="fast-amount" value="30000"> <span>30K</span></label>
                    </div>
                </div>
            </div>
            <div class="result-area">
                <div class="result-header"><span>–†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π</span><h3 id="fast-result-total">3 600.00 ‚ÇΩ</h3></div>
                <div class="progress-bar-viz"><div id="fast-progress-fill" class="progress-bar-fill"></div></div>
                <div class="result-stats">
                    <div class="stat-item"><span>–í–∫–ª–∞–¥</span><strong id="fast-investment">3 000.00 ‚ÇΩ</strong></div>
                    <div class="stat-item"><span>–ü—Ä–∏–±—ã–ª—å</span><strong id="fast-profit">+ 600.00 ‚ÇΩ</strong></div>
                    <div class="stat-item"><span>ROI</span><strong id="fast-roi">+20.00%</strong></div>
                </div>
                 <button class="btn btn-main-action" data-action="next">–Ø –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å!</button>
            </div>
        </div>`;
    panesHTML.cumulative = `
        <div id="calc-cumulative" class="calculator-pane">
            <p class="pane-description">–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–ø–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞. –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤–∑–Ω–æ—Å—ã –≤ —Å–µ—Ä—å–µ–∑–Ω—É—é —Å—É–º–º—É.</p>
            <div class="input-area">
                <div class="input-group"><label for="cumulative-amount">–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∫–ª–∞–¥</label><input type="number" id="cumulative-amount" value="1000" step="500" min="1000"></div>
                <div class="input-group">
                    <label>–°—Ä–æ–∫</label>
                    <div class="radio-options">
                        <label><input type="radio" name="cumulative-years" value="3" checked> <span>3–≥</span></label>
                        <label><input type="radio" name="cumulative-years" value="5"> <span>5–ª</span></label>
                        <label><input type="radio" name="cumulative-years" value="10"> <span>10–ª</span></label>
                    </div>
                </div>
            </div>
            <div class="result-area">
                 <div class="result-header"><span id="cumulative-result-label">–ö–∞–ø–∏—Ç–∞–ª —á–µ—Ä–µ–∑ 3 –≥–æ–¥–∞</span><h3 id="cumulative-result-total">180 000 ‚ÇΩ</h3></div>
                 <div class="progress-bar-viz"><div id="cumulative-progress-fill" class="progress-bar-fill"></div></div>
                 <div class="result-stats">
                    <div class="stat-item"><span>–í–ª–æ–∂–µ–Ω–æ</span><strong id="cumulative-investment">36 000 ‚ÇΩ</strong></div>
                    <div class="stat-item"><span>–ü—Ä–∏–±—ã–ª—å</span><strong id="cumulative-profit">+ 144 000 ‚ÇΩ</strong></div>
                    <div class="stat-item"><span>–ú–Ω–æ–∂–∏—Ç–µ–ª—å</span><strong id="cumulative-roi">x5</strong></div>
                </div>
                 <button class="btn btn-main-action" data-action="next">–Ø –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å!</button>
            </div>
        </div>`;

    const fastPotokData = { 3000: 3600, 15000: 16800, 30000: 33300 };
    const cumulativeMultipliers = {
        1000: [5, 8, 16], 2500: [5.25, 8.25, 17], 5000: [5.5, 8.5, 18], 10000: [5.75, 8.75, 19]
    };
    const yearMap = { 3: 0, 5: 1, 10: 2 };
    const formatCurrency = (val, frac = 0) => new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: frac, maximumFractionDigits: frac }).format(val);

    const calculations = {
        'growing': () => {
            const investment = parseFloat(document.getElementById('growing-amount').value) || 0;
            const total = (investment / 1000) * 1320;
            state.lastCalculation = { name: "'–†–∞—Å—Ç—É—â–∏–π –ü–æ—Ç–æ–∫'", investment: formatCurrency(investment, 2), result: formatCurrency(total, 2) };
            document.getElementById('growing-result-total').textContent = formatCurrency(total, 2);
            document.getElementById('growing-investment').textContent = formatCurrency(investment, 2);
            document.getElementById('growing-profit').textContent = `+ ${formatCurrency(total - investment, 2)}`;
            document.getElementById('growing-roi').textContent = `+${((total - investment) / investment * 100).toFixed(2)}%`;
            document.getElementById('growing-progress-fill').style.width = `${Math.min(((total - investment) / investment * 100), 100)}%`;
        },
        'fast': () => {
            const investment = parseFloat(document.querySelector('input[name="fast-amount"]:checked').value);
            const total = fastPotokData[investment] || 0;
            state.lastCalculation = { name: "'–ë—ã—Å—Ç—Ä—ã–π –ü–æ—Ç–æ–∫'", investment: formatCurrency(investment, 2), result: formatCurrency(total, 2) };
            document.getElementById('fast-result-total').textContent = formatCurrency(total, 2);
            document.getElementById('fast-investment').textContent = formatCurrency(investment, 2);
            document.getElementById('fast-profit').textContent = `+ ${formatCurrency(total - investment, 2)}`;
            document.getElementById('fast-roi').textContent = `+${((total - investment) / investment * 100).toFixed(2)}%`;
            document.getElementById('fast-progress-fill').style.width = `${Math.min(((total - investment) / investment * 100), 100)}%`;
        },
        'cumulative': () => {
            const amount = parseFloat(document.getElementById('cumulative-amount').value) || 0;
            const years = parseInt(document.querySelector('input[name="cumulative-years"]:checked').value, 10);
            const yearIndex = yearMap[years];
            const amountKey = Object.keys(cumulativeMultipliers).reverse().find(key => amount >= key) || 1000;
            const multiplier = cumulativeMultipliers[amountKey][yearIndex];
            const investment = amount * years * 12;
            const total = investment * multiplier;
            state.lastCalculation = { name: "'–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ü–æ—Ç–æ–∫'", investment: formatCurrency(investment), result: formatCurrency(total) };
            const yearText = (years === 1) ? '–≥–æ–¥' : (years < 5 ? '–≥–æ–¥–∞' : '–ª–µ—Ç');
            document.getElementById('cumulative-result-label').textContent = `–ö–∞–ø–∏—Ç–∞–ª —á–µ—Ä–µ–∑ ${years} ${yearText}`;
            document.getElementById('cumulative-result-total').textContent = formatCurrency(total);
            document.getElementById('cumulative-investment').textContent = formatCurrency(investment);
            document.getElementById('cumulative-profit').textContent = `+ ${formatCurrency(total - investment)}`;
            document.getElementById('cumulative-roi').textContent = `x${multiplier}`;
            document.getElementById('cumulative-progress-fill').style.width = '100%';
        }
    };
    
    const renderSavedPlans = () => {
        const savedPlansContainer = document.getElementById('saved-plans-container');
        if (!savedPlansContainer) return;
        savedPlansContainer.innerHTML = '';
        if (state.savedPlans.length === 0) return;
        
        state.savedPlans.forEach((plan, index) => {
            const planEl = document.createElement('div');
            planEl.className = 'saved-plan';
            planEl.innerHTML = `<div class="saved-plan-info"><strong>${plan.name}</strong>: ${plan.summary}</div>
                              <div class="saved-plan-actions"><button data-delete-id="${index}">‚ùå</button></div>`;
            savedPlansContainer.appendChild(planEl);
        });
    };
    
    document.body.addEventListener('click', e => {
        if (e.target && e.target.closest('#saved-plans-container') && e.target.dataset.deleteId) {
            state.savedPlans.splice(e.target.dataset.deleteId, 1);
            localStorage.setItem('savedPlans', JSON.stringify(state.savedPlans));
            renderSavedPlans();
        }
    });
    
    const setupCalculator = (type) => {
        if (!panesHTML[type]) return;
        
        calculatorContent.innerHTML = panesHTML[type];
        calculations[type]();
        
        const pane = calculatorContent.querySelector('.calculator-pane');
        pane.querySelectorAll('input').forEach(input => {
            input.addEventListener('input', () => {
                if(state.isInitialLoad) {
                    showAchievement('first_calc', 'üí°', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ!', '–ü–µ—Ä–≤—ã–π —Ä–∞—Å—á–µ—Ç');
                    state.isInitialLoad = false;
                }
                calculations[type]();
            });
        });

        // === –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –Ω–∞ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É ===
        const nextBtn = pane.querySelector('[data-action="next"]');
        nextBtn.addEventListener('click', () => {
            renderFinalSummary();
            showScreen('final-screen', 4);
        });
    };

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const targetType = tab.dataset.target;
            tabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            state.visitedTabs.add(targetType);
            if(state.visitedTabs.size === 3) {
                 showAchievement('strategist', 'üß†', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ!', '–°—Ç—Ä–∞—Ç–µ–≥');
            }
            
            setupCalculator(targetType);
        });
    });

    document.querySelectorAll('.archetype-card').forEach(card => {
        card.addEventListener('click', (e) => {
            state.archetype = e.currentTarget.dataset.archetype;
            showScreen('benefits-screen', 2);
        });
    });

    document.getElementById('to-calculator-btn').addEventListener('click', () => {
        const targetTab = document.querySelector(`.tab-button[data-target="${state.archetype}"]`);
        if (targetTab) {
            tabs.forEach(t => t.classList.remove('active'));
            targetTab.classList.add('active');
        }
        setupCalculator(state.archetype);
        renderSavedPlans();
        showScreen('calculator-screen', 3);
    });
    
    // === –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞–Ω ===
    document.getElementById('save-plan-btn').addEventListener('click', () => {
        const activeTab = document.querySelector('.tab-button.active');
        if (!activeTab) return;
        const type = activeTab.dataset.target;
        
        let plan = { type, name: '', summary: '' };
        if (type === 'fast') {
            const investment = document.querySelector('input[name="fast-amount"]:checked').value;
            plan.name = '–ë—ã—Å—Ç—Ä—ã–π';
            plan.summary = `${formatCurrency(investment)} ‚Üí ${formatCurrency(fastPotokData[investment])}`;
        } else if (type === 'growing') {
             const investment = document.getElementById('growing-amount').value;
             const total = (investment / 1000) * 1320;
             plan.name = '–†–∞—Å—Ç—É—â–∏–π';
             plan.summary = `${formatCurrency(investment)} ‚Üí ${formatCurrency(total)}`;
        } else if (type === 'cumulative') {
             const investment = document.getElementById('cumulative-amount').value;
             const years = document.querySelector('input[name="cumulative-years"]:checked').value;
             plan.name = '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π';
             plan.summary = `${formatCurrency(investment)}/–º–µ—Å –Ω–∞ ${years}–≥`;
        }

        if (state.savedPlans.length < 3) {
            state.savedPlans.push(plan);
            localStorage.setItem('savedPlans', JSON.stringify(state.savedPlans));
            renderSavedPlans();
            showAchievement('saver', 'üíæ', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ!', '–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        } else {
             showAchievement('plan_limit', '‚ö†Ô∏è', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ!', '–ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ 3 –ø–ª–∞–Ω–æ–≤');
        }
    });

    setupCalculator(state.archetype);
});